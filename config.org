#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle yes

* Personal info
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Lili Karashchuk"
      user-mail-address "krchtchk@gmail.com")
#+end_src

* secrets
Load the secrets. We ignore errors here so that if GPG config is missing, rest of config still loads.
#+BEGIN_SRC emacs-lisp
(load "~/.emacs-secrets.el" t)
;; (ignore-errors (load "~/.doom.d/secrets.el.gpg"))
#+END_SRC

#+RESULTS:
: t


* some defaults
#+begin_src emacs-lisp :tangle yes
;; keep going down in a file without newlines
(setq next-line-add-newlines t)

;; don't ask me before opening big files, just open them
(setq large-file-warning-threshold nil)

;; celndar start
(setq calendar-week-start-day 1)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src emacs-lisp
(cond
 ((string-equal system-name "callisto") ; desktop
  (setq doom-font "Iosevka-10"))
 (t
  (setq doom-font "Iosevka SS04 Medium-13")))
#+end_src

** Fallbacks
Fallback fonts for different kinds of scripts.
https://idiocy.org/emacs-fonts-and-fontsets.html

#+BEGIN_SRC emacs-lisp
;; Latin
(set-fontset-font t 'latin "Noto Sans")

;; East Asia: 你好, 早晨, こんにちは, 안녕하세요
;;
;; Make sure you use the right font. See
;; https://www.google.com/get/noto/help/cjk/.
;;
;; This font requires "Regular". Other Noto fonts dont.
;; ¯\_(ツ)_/¯
(set-fontset-font t 'han "Noto Sans CJK SC Regular")
(set-fontset-font t 'kana "Noto Sans CJK JP Regular")
(set-fontset-font t 'hangul "Noto Sans CJK KR Regular")
(set-fontset-font t 'cjk-misc "Noto Sans CJK KR Regular")

;; South East Asia: ជំរាបសួរ, ສະບາຍດີ, မင်္ဂလာပါ, สวัสดีครับ
(set-fontset-font t 'khmer "Noto Sans Khmer")
(set-fontset-font t 'lao "Noto Sans Lao")
(set-fontset-font t 'burmese "Noto Sans Myanmar")
(set-fontset-font t 'thai "Noto Sans Thai")

;; Africa: ሠላም
(set-fontset-font t 'ethiopic "Noto Sans Ethiopic")

;; Middle/Near East: שלום, السّلام عليكم
(set-fontset-font t 'hebrew "Noto Sans Hebrew")
(set-fontset-font t 'arabic "Noto Sans Arabic")

;;  South Asia: નમસ્તે, नमस्ते, ನಮಸ್ಕಾರ, നമസ്കാരം, ଶୁଣିବେ,
;;              ආයුබෝවන්, வணக்கம், నమస్కారం, བཀྲ་ཤིས་བདེ་ལེགས༎
(set-fontset-font t 'gujarati "Noto Sans Gujarati")
(set-fontset-font t 'devanagari "Noto Sans Devanagari")
(set-fontset-font t 'kannada "Noto Sans Kannada")
(set-fontset-font t 'malayalam "Noto Sans Malayalam")
(set-fontset-font t 'oriya "Noto Sans Oriya")
(set-fontset-font t 'sinhala "Noto Sans Sinhala")
(set-fontset-font t 'tamil "Noto Sans Tamil")
(set-fontset-font t 'telugu "Noto Sans Telugu")
(set-fontset-font t 'tibetan "Noto Sans Tibetan")

#+END_SRC

#+RESULTS:

** coding system

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

* Theme
** Appearance
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default.

#+begin_src emacs-lisp
;; (setq doom-theme 'doom-oceanic-next)
;; (setq doom-theme 'doom-palenight)
;; (setq doom-theme 'doom-one-light)
(setq doom-theme 'ef-autumn)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; (custom-set-faces
;;  '(mode-line-inactive ((t (:background "#171a26" :foreground "#676E95" :box nil))))
;;  '(solaire-mode-line-inactive-face ((t (:background "#171a26" :foreground "#676E95" :box nil))))
;; )
#+end_src

#+RESULTS:

** Custom faces
#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(vterm-color-black ((t (:background "darkgray" :foreground "black"))))
 '(org-scheduled-today ((t (:foreground "#eee"))))
 '(org-scheduled ((t (:foreground "#eee"))))
 '(org-agenda-dimmed-todo-face ((t (:foreground "#ccc"))))
 ;; '(org-done ((t (:strike-through nil))))

 '(term-color-green ((t (:foreground "#36a036" :background "#FFFFFF"))))

 '(term-default-fg-color ((t (:inherit term-color-white))))
 '(term-default-bg-color ((t (:inherit term-color-black))))

 )

#+END_SRC

#+RESULTS:

** Modeline stuff
#+begin_src emacs-lisp
(setq doom-modeline-major-mode-icon t)
(after! doom-modeline
  (remove-hook 'doom-modeline-mode-hook #'size-indication-mode) ; filesize in modeline
  (remove-hook 'doom-modeline-mode-hook #'column-number-mode)   ; cursor column in modeline
  (setq doom-modeline-buffer-encoding nil)
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
  (setq doom-modeline-enable-word-count t)
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode latex-mode tex-mode text-mode))
  )
#+end_src

#+RESULTS:
| markdown-mode | gfm-mode | org-mode | latex-mode | tex-mode | text-mode |
** Dashboard
#+begin_src emacs-lisp :tangle yes
(defun get-random-file (dir)
    (concat ;; (file-name-as-directory dir)
            (string-trim-right
             (shell-command-to-string
              (format "ls %s | shuf | head -1" dir)))))

(setq banner-dir "~/Pictures/wallpapers/chosen/small-emacs")

(setq +doom-dashboard-banner-dir banner-dir)
(setq +doom-dashboard-banner-file (get-random-file banner-dir))


#+end_src
** spacious-padding
#+begin_src emacs-lisp :tangle yes
(use-package! spacious-padding
  :config
  :defer
  (spacious-padding-mode +1)
)
#+end_src

* Keybindings
** navigation keys
#+begin_src emacs-lisp
;; TODO: change this to map!
(bind-keys*

 ;; manage windows
 ("s-SPC" . ivy-switch-buffer)
 ("s-k" . kill-this-buffer)
 ("s-Q" . kill-this-buffer)
 ("s-o" . other-window)
 ("s-O" . (lambda () (interactive) (ace-window 4)))
 ("s-w" . delete-window)
 ("s-W" . ace-delete-window)
 ("C-1" . delete-other-windows)
 ("s-<left>" . switch-window-mvborder-left)
 ("s-<right>" . switch-window-mvborder-right)
 ("s-<up>" . switch-window-mvborder-up)
 ("s-<down>" . switch-window-mvborder-down)
 ("s-," . (lambda () (interactive) (split-window-right) (other-window 1)))
 ("s-." . (lambda () (interactive) (split-window-below) (other-window 1)))
 ;; ("s-z" . previous-buffer)
 ;; ("s-Z" . next-buffer)
 ("s-d" . avy-goto-char-timer)
 ("C-&" . delete-other-windows)

 ;; eshell
 ;; ("M-S-s-<return>" . shell-switcher-switch-buffer)
 ;; ("M-S-<return>" . shell-switcher-switch-buffer)

 ("s-m" . vterm-toggle)
 ("s-M" . vterm)
 ;; ("s-M" . shell-switcher-new-shell)
 ;; ("s-_" . (lambda () (interactive) (split-window-horizontally) (other-window 1) (shell-switcher-switch-buffer)))

 ;; useful navigation
 ("s-f" . counsel-find-file)
 ("C-x \\" . align-regexp)
 ;; ("M-s-b" . beeminder-list-goals)
 ;; ("<XF86LaunchA>" . (lambda (&optional arg) (interactive "P") (org-agenda arg "a")))
 ;; ("<XF86LaunchB>" . counsel-org-capture)
 ;; ("M-s-c" . counsel-org-capture)
 ;; ("<XF86KbdBrightnessDown>" . (lambda () (interactive) (switch-to-buffer "*dashboard*")))

 )

  #+end_src

#+RESULTS:

** ergonomic keys
Based on ergoemacs key bindings, but adjusted for me
I want to have movement using Ctrl+something

#+begin_src emacs-lisp
(map!
 "C-x C-x" 'pop-to-mark-command
 "C-o" 'other-window
 "C-t" 'previous-line
 "C-p" 'transpose-chars
 "M-i" 'universal-argument
 "M-p" (lambda () (interactive) (execute-kbd-macro (kbd "M-{")))
 "M-g" (lambda () (interactive) (execute-kbd-macro (kbd "M-}")))
 "M-[" (lambda () (interactive) (execute-kbd-macro (kbd "M-{")))
 "M-]" (lambda () (interactive) (execute-kbd-macro (kbd "M-}")))
 "s-z" 'repeat
 "C-c m" 'counsel-describe-face
 "C-c q" 'switch-theme
 "M-;" 'comment-line
 )



(map! :map general-override-mode-map
      "C-." 'set-mark-command
      )

(define-key key-translation-map (kbd "C-u") (kbd "C-x"))
(define-key key-translation-map (kbd "M-h") (kbd "C-x C-s"))

#+end_src

#+RESULTS:
: 

** org agenda keys

#+BEGIN_SRC emacs-lisp
(defun switch-to-agenda ()
  (interactive)
  (ivy-read "Agenda file: " org-agenda-files
            :action 'find-file)
  )

(map!
 (:prefix-map ("s-a" . "agenda")
  "s-a" 'org-agenda-list
  "a" 'org-agenda-list
  "b" 'beeminder-list-goals
  "c" 'org-capture
  "t" 'org-todo-list
  "n" 'org-agenda
  "v" 'org-ql-view
  "g" 'switch-to-agenda
  ))
#+END_SRC

#+RESULTS:

* revert buffer
#+begin_src emacs-lisp :tangle yes
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))
(bind-key "C-x C-r" 'revert-buffer-no-confirm)
#+end_src

#+RESULTS:
: revert-buffer-no-confirm

* duplicate line
#+begin_src emacs-lisp :tangle yes
;; https://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-emacs
(defun duplicate-line (arg)
  "Duplicate current line, leaving point in lower line."
  (interactive "*p")

  ;; save the point for undo
  (setq buffer-undo-list (cons (point) buffer-undo-list))

  ;; local variables for start and end of line
  (let ((bol (save-excursion (beginning-of-line) (point)))
        eol)
    (save-excursion

      ;; don't use forward-line for this, because you would have
      ;; to check whether you are at the end of the buffer
      (end-of-line)
      (setq eol (point))

      ;; store the line and disable the recording of undo information
      (let ((line (buffer-substring bol eol))
            (buffer-undo-list t)
            (count arg))
        ;; insert the line arg times
        (while (> count 0)
          (newline)         ;; because there is no newline in 'line'
          (insert line)
          (setq count (1- count)))
        )

      ;; create the undo information
      (setq buffer-undo-list (cons (cons eol (point)) buffer-undo-list)))
    ) ; end-of-let

  ;; put the point in the lowest line and return
  (next-line arg))


(map! "C-c d" 'duplicate-line)
#+end_src

* ace-window
#+begin_src emacs-lisp

(after! ace-window
  (progn
    (setq aw-keys '(?h ?t ?n ?s ?a ?o ?e ?u ?i ?d))
    (setq aw-scope 'frame)
    ;; (custom-set-faces
    ;;  '(aw-leading-char-face
    ;;    ((t (:inherit ace-jump-face-foreground :height 1.0))))
    ))

#+end_src

#+RESULTS:
: ace-window
* switch-window
#+begin_src emacs-lisp :tangle yes
(use-package switch-window
  :commands
  (
   switch-window-mvborder-left
   switch-window-mvborder-right
   switch-window-mvborder-up
   switch-window-mvborder-down
   ))

#+end_src

#+RESULTS:

* org
** basic setup
#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/notes/org/")
#+end_src
** org appearance
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-startup-indented t
        org-hide-leading-stars t
        org-adapt-indentation nil)
  )
#+end_src

#+RESULTS:


** org capture
#+BEGIN_SRC emacs-lisp :tangle yes
(after! org
  (setq +org-capture-todo-file "~/notes/org/todo/inbox.org")

  (setq org-capture-templates
        '(("t" "Personal todo" entry
           (file+headline +org-capture-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t))
        )
  )
#+END_SRC

#+RESULTS:
| t | Personal todo | entry | (file+headline +org-capture-todo-file Inbox) | * TODO %? |

** org agenda
#+BEGIN_SRC emacs-lisp
;; set priorities

(after! org
  (setq org-agenda-sticky t)
  (setq org-agenda-use-time-grid nil)
  (setq org-agenda-span 14)
     (setq org-log-done 'time)
  (setq org-priority-highest 0)
  (setq org-priority-lowest 9)
  (setq org-priority-default 3)

  (setq org-deadline-warning-days 7)

  (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
  (setq org-scheduled-past-days 14)

  (setq org-todo-keywords
        '((sequence "TODO(t)" "STRT(s)" "PROJ(p)" "SCHD(c)" "WAIT(w)" "FUTR(f)"
                    "|"
                    "DONE(d)" "KILL(k)")))

  (setq org-agenda-breadcrumbs-separator "->")

  (with-no-warnings
    (custom-declare-face '+org-todo-future
                         '((t (:inherit (bold font-lock-keyword-face org-todo)))) ""))

  (setq org-todo-keyword-faces
        '(("STRT" . +org-todo-active)
          ("SCHD" . +org-todo-active)
          ("WAIT" . +org-todo-onhold)
          ("FUTR" . +org-todo-future)
          ("PROJ" . +org-todo-project)))

  (setq org-agenda-prefix-format " %i %?-12t% s")
  (setq org-agenda-overriding-header "⚡ SCHEDULE:\n")

  )

(setq org-agenda-custom-commands
      '(("o" "My Agenda"
         ((todo "TODO" (
                      (org-agenda-overriding-header "\nDo Today:\n⎺⎺⎺⎺⎺⎺⎺⎺⎺")
                      (org-agenda-remove-tags t)
                      (org-agenda-prefix-format " %-2i %-15b")
                      (org-agenda-todo-keyword-format "")
                       ))
          (agenda "" (
                      (org-agenda-start-day "+0d")
                      (org-agenda-span 5)
                      (org-agenda-overriding-header "Schedule:⎺⎺⎺⎺⎺⎺⎺⎺⎺")
                      (org-agenda-repeating-timestamp-show-all nil)
                      (org-agenda-remove-tags t)
                      (org-agenda-prefix-format   "  %-3i  %-15b %t%s")
                      (org-agenda-todo-keyword-format " ☐ ")
                      (org-agenda-current-time-string "⮜┈┈┈┈┈┈┈ now")
                      (org-agenda-scheduled-leaders '("" ""))
                      (org-agenda-time-grid (quote ((daily today remove-match)
                                                    (0900 1200 1500 1800 2100)
                                                    "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))
                       ))
          ))))

#+END_SRC

#+RESULTS:
| o | My Agenda | ((todo TODO ((org-agenda-overriding-header |
** org-super-agenda

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :after org-agenda
  :config
  (setq org-super-agenda-groups '((:name "Today"
                                   :time-grid table
                                   :scheduled today)
                                  (:name "Due today"
                                   :deadline today)
                                  (:name "Important"
                                   :priority "A")
                                  (:name "Overdue"
                                   :deadline past)
                                  (:name "Due soon"
                                   :deadline future)))
  (org-super-agenda-mode -1))
#+END_SRC

#+RESULTS:
: t

** org-ql
#+BEGIN_SRC emacs-lisp
(after! org-ql
  (setq org-ql-views
        '(
          ("deadline" :buffers-files org-agenda-files
           :query
           (and (todo) (deadline))
           :sort deadline
           :super-groups ((:auto-category))
           :title "deadline")

          ("category" :buffers-files org-agenda-files
           :query
           (and (todo) (not (todo "WAIT" "HOLD"))
                (not (scheduled :from today))
                (not (children (todo))))
           :sort (priority) :narrow nil
           :super-groups ((:auto-category))
           :title "category")

          ("priority" :buffers-files org-agenda-files
           :query
           (and (todo) (not (todo "WAIT" "HOLD"))
                (not (scheduled :from today))
                (not (children (todo))))
           :sort nil :narrow nil :super-groups
           ((:auto-priority))
           :title "priority")
          ))
  )

#+END_SRC

#+RESULTS:
| deadline | :buffers-files | org-agenda-files | :query | (and (todo) (deadline))                                                                   | :sort | deadline   | :super-groups | ((:auto-category)) | :title        | deadline           |        |          |
| category | :buffers-files | org-agenda-files | :query | (and (todo) (not (todo WAIT HOLD)) (not (scheduled :from today)) (not (children (todo)))) | :sort | (priority) | :narrow       | nil                | :super-groups | ((:auto-category)) | :title | category |
| priority | :buffers-files | org-agenda-files | :query | (and (todo) (not (todo WAIT HOLD)) (not (scheduled :from today)) (not (children (todo)))) | :sort | nil        | :narrow       | nil                | :super-groups | ((:auto-priority)) | :title | priority |

** keybindings
#+begin_src emacs-lisp :tangle yes
(after! org
  (map! :map org-mode-map
        "C-c C-n" 'org-next-block
        "C-c C-p" 'org-previous-block
        "C-c a" 'org-latex-export-to-pdf
        "C-c z" 'org-archive-subtree
        ))
#+end_src

#+RESULTS:

** open pdf files in emacs
#+begin_src emacs-lisp :tangle yes
(use-package! org
  :defer t
  :config
  (setcdr (assoc "\\.pdf\\'" org-file-apps) 'emacs))
#+end_src
** insert dates
#+begin_src emacs-lisp :tangle yes
(defun org-insert-current-date ()
  (interactive)
  (org-insert-time-stamp (current-time))
  )

(defun org-insert-current-date-inactive ()
  (interactive)
  (org-insert-time-stamp (current-time) nil t)
  )

(defun org-insert-current-datetime-inactive ()
  (interactive)
  (org-insert-time-stamp (current-time) t t)
  )

(map! :map org-mode-map
      "C-c ," 'org-insert-current-date
      "C-c C-," 'org-insert-current-datetime-inactive
      "C-c C-." 'org-insert-current-date-inactive
      )
#+end_src

#+RESULTS:
** org-ref citations
#+begin_src emacs-lisp :tangle yes
(after! org-ref
  (map! :map org-mode-map
        "C-c C-i" 'org-ref-insert-link ))
#+end_src
** org-to-clipboard
#+BEGIN_SRC emacs-lisp
(defun org-to-clipboard ()
  "Convert the contents of the current buffer or region from Org
mode to HTML.  Store the result in the clipboard."
  (interactive)
  (if (use-region-p)
      (shell-command-on-region (region-beginning)
                               (region-end)
                               "org2clip")
      (shell-command-on-region (point-min)
                               (point-max)
                               "org2clip"))) 
#+END_SRC
** no smartparens in org-mode
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook #'turn-off-smartparens-mode)
#+end_src
** async execute
#+begin_src emacs-lisp :tangle yes
(after! org
  (require 'ob-async)
  (setq ob-async-no-async-languages-alist '(
                                            "jupyter-python" "jupyter-julia"
                                            "ipython"
                                            ))
  )
#+end_src

#+RESULTS:
| jupyter-python | jupyter-julia | ipython |
** inline images
#+begin_src emacs-lisp :tangle yes
(setq org-image-actual-width 320)
#+end_src
** exporting to html
#+begin_src emacs-lisp :tangle yes

(after! ox-html
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-htmlize-font-prefix "org-")
  (setq org-html-postamble nil)

  (setcdr (assq 'path org-html-mathjax-options)
          '("https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js")
          )

  (setq org-html-mathjax-template
        "<script>
window.MathJax = {
  chtml: {
    displayAlign: \"%ALIGN\",
    displayIndent: \"%INDENT\",
    scale: %SCALE / 100
  },
  svg: {
    scale: %SCALE / 100
  },
  tex: {
    tags: \"ams\",
    multlineWidth: \"%MULTLINEWIDTH\",
    tagSide: \"%TAGSIDE\",
    tagIndent: \"%TAGINDENT\",
    autoload: {
      color: [],
      colorV2: ['color']
    },
    packages: {'[+]': ['noerrors']}
  },
  options: {
    ignoreHtmlClass: 'tex2jax_ignore',
    processHtmlClass: 'tex2jax_process'
  },
  loader: {
    load: ['[tex]/noerrors']
  }
};
</script>
<script src=\"%PATH\" id=\"MathJax-script\"></script>"
        )
  )
#+end_src

#+RESULTS:
** archiving

Useful function to archive all the DONE tasks in a file
https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command
#+begin_src emacs-lisp :tangle yes
(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/KILL" 'file))
#+end_src

#+RESULTS:
: org-archive-done-tasks

* org-roam
** roam
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-directory (file-truename "~/notes/org/roam"))
  (setq org-roam-file-exclude-regexp
        (concat (expand-file-name org-roam-directory) "/.stversions/"))
  (map! :leader
        :prefix "n"
        :desc "Org-Roam-Insert" "i" #'org-roam-node-insert
        :desc "Org-Roam-Find"   "f" #'org-roam-node-find
        :desc "Org-Roam-Buffer" "r" 'my/org-roam-buffer
        :desc "Org-Roam-Today"  "t" #'org-roam-dailies-goto-today
        :desc "Org-Roam-Yesterday"  "y" #'org-roam-dailies-goto-yesterday
        :desc "Org-Roam-Tomorrow"  "m" #'org-roam-dailies-goto-tomorrow
        :desc "Org-Roam-Date"  "g" #'org-roam-dailies-goto-date
        )
  (map! :map org-mode-map
        "C-c C-r" 'org-roam-buffer-toggle
        "C-s-<left>" #'org-roam-dailies-goto-previous-note
        "C-s-<right>" #'org-roam-dailies-goto-next-note
        )
  :config
  (defun my/org-roam-buffer ()
    (interactive)
    (org-roam-buffer-display-dedicated (org-roam-node-at-point)))
  ;; (setq org-roam-capture-templates
  ;;       '(("d" "default" plain (function org-roam--capture-get-point)
  ;;          "%?"
  ;;          :file-name "%<%Y-%m-%d>-${slug}"
  ;;          :head "#+TITLE: ${title}\n"
  ;;          :unnarrowed t))
  ;;       )

  (add-hook 'org-roam-mode-hook 'visual-line-mode)
  (org-roam-db-autosync-mode +1)

  (setq org-roam-capture-templates
        '(("d" "default" plain "%?" :target
           (file+head "%<%Y-%m-%d>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("r" "bibliography reference" plain
           ":PROPERTIES:
:DATE: %^{date}
:AUTHOR: %^{author}
:JOURNAL: %^{journaltitle}
:END:
${ref}"
           :if-new
           (file+head "${citekey}.org" "#+title: ${title} - ${citekey}\n")
           :unnarrowed t)))

  (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))
  (advice-add 'org-roam-db-update-file :around
              (defun +org-roam-db-update-file (fn &rest args)
                (emacsql-with-transaction (org-roam-db)
                  (apply fn args))))

  )

#+end_src

#+RESULTS:
: t
** bibtex
#+begin_src emacs-lisp :tangle yes
  (use-package! org-roam-bibtex
    :after org-roam
    :config
    (require 'org-ref)
    (setq orb-preformat-keywords '("citekey" "title" "author" "date" "journaltitle"))
    (org-roam-bibtex-mode +1)
    )
#+end_src

#+RESULTS:
: t

** deft
#+BEGIN_SRC emacs-lisp :tangle no
  ;; (use-package! deft
  ;;   :defer
  ;;   :after org
  ;;   :bind
  ;;   ("C-c n d" . deft)
  ;;   :custom
  ;;   (deft-recursive t)
  ;;   (deft-use-filter-string-for-filename t)
  ;;   (deft-default-extension "org")
  ;;   (deft-directory org-roam-directory))
#+END_SRC

#+RESULTS:
: deft

* ivy
** standard
#+begin_src emacs-lisp :tangle yes
(use-package! ivy
  :defer t
  :config
  (progn
    (setq ivy-re-builders-alist
          '((counsel-rg . ivy--regex-plus)
            (swiper . ivy--regex-plus)
            (ivy-bibtex . ivy--regex-plus)
            (t      . ivy--regex-plus))
          ivy-initial-inputs-alist nil
          ivy-use-virtual-buffers t
          ivy-virtual-abbreviate 'full
          ivy-count-format "%d/%d "
          ivy-height 15
          ivy-wrap t
          )
    ))

(map!
 ;; ("C-s" . counsel-grep)
 "M-x" 'counsel-M-x
 "C-x C-f" 'counsel-find-file
 "C-h v" 'counsel-describe-variable
 "M-y" 'counsel-yank-pop
 "C-c j" 'counsel-semantic-or-imenu
 "C-c u" 'counsel-semantic-or-imenu
 :map ivy-minibuffer-map
 "C-m" 'ivy-alt-done
 "<C-return>" 'ivy-immediate-done
 "C-s" 'ivy-next-line
 "C-r" 'ivy-previous-line
 "C-w" 'ivy-yank-word
 :map ivy-switch-buffer-map
 "C-k" 'ivy-switch-buffer-kill
 :map org-mode-map
 "C-c j" 'counsel-org-goto
 "C-c u" 'counsel-org-goto
 )
#+end_src

#+RESULTS:
** prescient
#+begin_src emacs-lisp :tangle yes
(use-package! ivy-prescient
  :config
  (ivy-prescient-mode 1)
  (setq prescient-filter-method '(literal regexp initialism))
  (setq ivy-prescient-sort-commands '(:not swiper ivy-switch-buffer counsel-yank-pop)))
#+end_src
** ivy-bibtex
#+begin_src emacs-lisp :tangle yes
(use-package! ivy-bibtex
  :defer-incrementally t
  :commands (ivy-bibtex)
  :init (progn
          (setq bibtex-completion-notes-path "~/notes/org/references/article_notes.org")
          (setq bibtex-completion-bibliography (list "~/notes/org/references/articles.bib"))
          (setq reftex-default-bibliography bibtex-completion-bibliography)
          (setq bibtex-completion-pdf-field "file")
          (setq bibtex-completion-notes-template-one-file "\n* ${year} - ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :AUTHOR: ${author}\n  :URL: ${url}\n  :END:\ncite:${=key=}\n") ;
          )
  :bind ("C-c b" . ivy-bibtex)
  )

(use-package! org-ref
  :defer t
  :commands (org-ref-ivy-insert-cite-latex)
  :init (progn
          (setq org-ref-bibliography-notes bibtex-completion-notes-path
                org-ref-default-bibliography bibtex-completion-bibliography
                org-ref-pdf-directory "~/notes/org/references/pdfs/")

          (setq org-ref-completion-library 'org-ref-ivy-cite)
          (setq org-ref-insert-cite-key "C-c i r")

          (defun my/org-ref-get-pdf-filename (key)
            "Open the pdf for bibtex key under point if it exists."
            (interactive)
            (let* ((bibtex-completion-bibliography (org-ref-find-bibliography))
                   (pdf-file (car (bibtex-completion-find-pdf key))))
              pdf-file))

          (setq org-ref-get-pdf-filename-function 'my/org-ref-get-pdf-filename)
          )
  )

#+end_src

#+RESULTS:
: my/org-ref-get-pdf-filename
* abbrev mode
#+begin_src emacs-lisp :tangle yes
(use-package abbrev
  :init
  (setq-default abbrev-mode t)
  ;; a hook funtion that sets the abbrev-table to org-mode-abbrev-table
  ;; whenever the major mode is a text mode
  (defun tec/set-text-mode-abbrev-table ()
    (if (derived-mode-p 'text-mode)
        (setq local-abbrev-table org-mode-abbrev-table)))
  :commands abbrev-mode
  :hook
  (abbrev-mode . tec/set-text-mode-abbrev-table)
  :config
  (setq abbrev-file-name (expand-file-name "abbrev.el" doom-private-dir))
  (setq save-abbrevs 'silently))
#+end_src

#+RESULTS:
| tec/set-text-mode-abbrev-table |

* deadgrep

#+begin_src emacs-lisp :tangle yes
(setq-default deadgrep--search-type 'words)
#+end_src
* writing mode
** visual-fill-column-mode
Replaced with olivetti
#+begin_src emacs-lisp :tangle no
(setq-default visual-fill-column-center-text t)
(map!
 :leader
 (:prefix-map ("t" . "toggle")
   "v" 'visual-fill-column-mode))
#+end_src

#+RESULTS:

** olivetti
#+begin_src emacs-lisp
(after! olivetti
  (setq-default olivetti-body-width 100)
)

(map!
 :leader
 (:prefix-map ("t" . "toggle")
   "v" 'olivetti-mode))
#+end_src

#+RESULTS:
: olivetti-mode

* recentf
#+begin_src emacs-lisp :tangle yes
(use-package! recentf                    ; Save recently visited files
  :init (recentf-mode)
  :config
  (setq recentf-max-saved-items nil
        recentf-max-menu-items 400
        ;; Cleanup recent files only when Emacs is idle, but not when the mode
        ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
        ;; idles often enough to have the recent files list clean up regularly
        recentf-auto-cleanup 'never ;; disable before we start recentf! If using Tramp a lot.
        recentf-exclude (list "/\\.git/.*\\'" ; Git contents
                              "/elpa/.*\\'" ; Package files
                              "/itsalltext/" ; It's all text temp files
                              )))

(defun save-list-no-message ()
  (interactive)
  (let ((inhibit-message t)) (recentf-save-list))
  )
(run-at-time "2 min" 120 'save-list-no-message)
#+end_src

#+RESULTS:
: [nil 24229 56965 927378 120 save-list-no-message nil nil 790000]

* vterm
#+begin_src emacs-lisp :tangle yes

(use-package! vterm
  :defer
  :config
  (setq vterm-shell "/usr/bin/zsh")
  (setq vterm-kill-buffer-on-exit t)
)

(use-package! vterm-toggle
  :defer
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-cd-auto-create-buffer nil))

(map! :map vterm-mode-map
      "C-m" 'vterm-toggle-forward
      "C-z" 'vterm-toggle-backward
      )

#+end_src

#+RESULTS:
: vterm-toggle-backward
* latex
** org-ref
#+begin_src emacs-lisp
  (defun org-ref-to-latex-citation ()
    (interactive)
    (let ((end (point)))
      (search-backward "cite")
      (insert "\\")
      (search-forward ":")
      (replace-match "{")
      (goto-char end)
      (forward-char)
      (insert "}")
      ))

  (defun org-ref-ivy-insert-cite-latex ()
    (interactive)
    (org-ref-ivy-insert-cite-link)
    (org-ref-to-latex-citation))

  (map! :map TeX-mode-map
        "C-c C-i"  'org-ref-ivy-insert-cite-latex)
#+end_src

#+RESULTS:
* python
** ipython shell
#+begin_src emacs-lisp :tangle yes
(setq python-shell-interpreter "/home/lili/mambaforge/bin/ipython"
      python-shell-interpreter-args "--simple-prompt -i")

(map! :map python-mode-map
      :localleader
      :desc "run python" "p" 'run-python)


  (defun clear-shell ()
    (interactive)
    (let ((comint-buffer-maximum-size 0))
      (comint-truncate-buffer)))

  (defun run-python-conda ()
    (interactive)
    (let* ((conda-env
            (read-string "conda env: "))
           (python-shell-interpreter
            (format "/home/lili/miniconda3/envs/%s/bin/ipython" conda-env))
           )
      (run-python)
      ;; (run-python (format "~/scripts/ipython-conda.sh") t t)
      ))

(map! :map python-mode-map
      :localleader
      :desc "run python conda" "n" 'run-python-conda)

#+end_src

#+RESULTS:

** emacs ipython notebook (ein)
#+begin_src emacs-lisp :tangle yes
(after! ein-notebook
  (setq ein:notebooklist-sort-field ::last_modified)
  (setq ein:notebooklist-sort-order :descending)
  (setq ein:output-area-inlined-images t)
  (map! :map ein:notebook-mode-map
        "M-P" 'ein:worksheet-goto-prev-input-km
        "M-N" 'ein:worksheet-goto-next-input-km
        "M-G" 'ein:worksheet-goto-next-input-km
        "M-g" 'forward-paragraph
        "M-p" 'backward-paragraph
        ;; "C-c p" 'ein:worksheet-goto-prev-input-km
        ;; "C-c n" 'ein:worksheet-goto-next-input-km
        "<C-return>" 'ein:worksheet-execute-cell-and-goto-next-km
        )
  )

#+end_src
** ob-ipython
#+begin_src emacs-lisp :tangle no
(after! org
  (require 'ob-ipython)
  (map! :map ob-ipython-mode-map
        "M-." 'ob-ipython-inspect
        "C--" 'company-ob-ipython
        "<S-Return>" 'org-ctrl-c-ctrl-c
        )
  )
(after! company
  (add-to-list 'company-backends 'company-ob-ipython)
  )

(after! org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ipython . t)
     ))
  )

(after! python
(add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")
)



#+end_src

#+RESULTS:
| jupyter | pypy | Python |
** emacs-jupyter
#+begin_src emacs-lisp :tangle yes
(defun my-org-execute-and-next-block ()
  (interactive)
  (condition-case nil
      (org-babel-execute-src-block)
    (error nil))
  (org-next-block 1)
  )

(after! org
  (require 'ob-jupyter)
  (require 'ob-python)
  (require 'ox-ipynb)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (julia . t)
     (python . t)
     (jupyter . t)))
  (map! :map org-mode-map
        "M-." 'jupyter-inspect-at-point
        "C-z" 'jupyter-org-interrupt-kernel
        "C-'" 'my-org-execute-and-next-block
        )

  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                      (:session . "/jpy:localhost#8888:py")
                                                      (:kernel . "python3")))
  )
#+end_src

#+RESULTS:
: ((:async . yes) (:session . /jpy:localhost#8888:py) (:kernel . python3))

* company
Idle company completion drives me crazy somehow. Instead of that, we use a keybinding to trigger it.
#+begin_src emacs-lisp :tangle yes
(after! company
  (setq company-idle-delay nil)
  (global-unset-key (kbd "C--"))
  (map! :map company-mode-map
        "C--" 'company-complete)
  ;(company-prescient-mode -1)
)
(after! org
  (set-company-backend! 'org-mode 'company-capf))
#+end_src

#+RESULTS:
* emojify
#+BEGIN_SRC emacs-lisp
(defun emojify-insert-emoji-unicode ()
  (interactive)
  (insert (emojify-completing-read
           "Select a unicode style emoji: "
           (lambda (emoji)
             (string-match-p (regexp-quote "unicode") emoji)))))

(use-package emojify
  :defer t
  :init
  (global-emojify-mode +1)
  (map! :leader
        :prefix "h"
        :desc "Insert emoji" "i" 'emojify-insert-emoji
        :desc "Insert emoji unicode" "u" 'emojify-insert-emoji-unicode
        )
  (setq emojify-emoji-styles '(unicode))
  )
#+END_SRC
* nyan-mode
#+begin_src emacs-lisp :tangle yes
(after! nyan-mode
  (setq nyan-bar-length 16))
#+end_src
* picpocket
#+BEGIN_SRC emacs-lisp
  (use-package picpocket
    :bind (:map picpocket-mode-map
                ("<left>" . picpocket-previous)
                ("<right>" . picpocket-next)
                :map dired-mode-map
                ("P" . picpocket)
                )
    )
#+END_SRC

#+RESULTS:
: picpocket

* flyspell
#+BEGIN_SRC emacs-lisp
(defun my-save-word ()
  (interactive)
  (let ((current-location (point))
         (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word)
                           current-location (cadr word) (caddr word) current-location)
      (message "\"%s\" added to dictionary!" (car word))
        )
        ))

(defun my-add-word () (interactive) (my-save-word))


(after! flyspell
  (map! :map flyspell-mode-map
        "C-c x" 'my-save-word)
        )
#+END_SRC

#+RESULTS:

* native-compilation
#+BEGIN_SRC emacs-lisp
(setq comp-deferred-compilation t)
#+END_SRC
* json-mode
this fixes an issue with json-mode, which expects this function for some reason
#+begin_src emacs-lisp :tangle yes
(defun jsons-remove-buffer () nil)
#+end_src
* beeminder
From https://github.com/mbork/beeminder.el
I adjust all the faces to work with the theme, as the default colors don't work well on a dark background.

#+begin_src emacs-lisp :tangle no
(use-package beeminder
  :config
  (setq beeminder-when-the-day-ends (* 3600 3) ; 3am
        beeminder-username secret-beeminder-username
        beeminder-auth-token secret-beeminder-auth-token
        )


  (custom-set-faces
   '(beeminder-red ((t (:inherit font-lock-keyword-face))))
   '(beeminder-green ((t (:inherit font-lock-function-name-face))))
   '(beeminder-blue ((t (:inherit font-lock-constant-face))))
   '(beeminder-yellow ((t (:inherit font-lock-builtin-face))))
   '(beeminder-error ((t (:inherit error))))
   '(beeminder-warning ((t (:inherit warning))))
   '(subtle-highlight ((t (:inherit bold))))
   '(beeminder-dirty ((t (:inherit font-lock-comment-face))))
   )

  )

#+end_src

#+RESULTS:
: t
* artificial intelligence
** chat.el
#+BEGIN_SRC emacs-lisp
(use-package chat
  :config
  (setq chat-api-key secret-chat-api-key)
  (setq chat-model "gpt-3.5-turbo")
  ;; (setq chat-model "gpt-4")
  (setq chat-max-tokens 700)
  (add-hook 'chat-mode-hook #'olivetti-mode)
        )

#+END_SRC
* yasnippet
** auto-yasnippet
#+begin_src emacs-lisp :tangle yes
(use-package auto-yasnippet
  :bind
  ("s-c" . aya-create)
  ("s--" . aya-expand))
#+end_src

#+RESULTS:
: aya-expand
* lsp
#+begin_src emacs-lisp :tangle yes
(after! lsp-ui
  (setq lsp-ui-doc-enable nil
        lsp-ui-sideline-enable nil
        lsp-signature-render-documentation nil
        lsp-signature-auto-activate nil))
#+end_src

#+RESULTS:
* quarto-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'quarto-mode)
#+END_SRC

#+RESULTS:
: quarto-mode
